@using ThomasSalon.UI.Models
@model RegisterViewModel

@{
    ViewBag.Title = "Registro de Usuario";
}
<div class="container pt-5">
    <h2 class="admin-title">Registro de usuario para colaborador</h2>

    <div class="row justify-content-center">
        <div class="col-md-8">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()


                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-horizontal border p-4 rounded shadow-sm bg-light">
                <!-- Email -->
                <div class="form-group mb-3">

                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })

                </div>

                <!-- Password -->
                <div class="form-group mb-3">

                    @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })

                </div>

                <!-- Confirm Password -->
                <div class="form-group mb-3">

                    @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })

                    @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                </div>


                <!-- Rol -->
                <div class="form-group mb-3">

                    @Html.LabelFor(model => model.Rol, new { @class = "control-label col-md-2" })
                    @Html.DropDownListFor(model => model.Rol, (SelectList)ViewBag.Roles, new { @class = "form-control", id = "rolDropdown" })
                    @Html.ValidationMessageFor(model => model.Rol, "", new { @class = "text-danger" })
                </div>


                <div class="form-group mb-3" id="sucursalesField" style="display: none;">
                    @Html.LabelFor(model => model.IdSucursal, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.DropDownListFor(model => model.IdSucursal,
                        ViewBag.Sucursales != null ? ViewBag.Sucursales as SelectList : new SelectList(new List<SelectListItem>()),
                        new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.IdSucursal, "", new { @class = "text-danger" })
                </div>

                <div class="form-group text-center">

                    <input type="submit" value="Registrar usuario" class="btn btn-stormy" />
                    <a href="@Request.UrlReferrer" class="btn btn-admin">Volver a la lista</a>

                </div>

            </div>
            }

        </div>
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var rolDropdown = document.getElementById("rolDropdown");

        var fields = {
            "sucursalesField": ["Administrador"]

        };

        function toggleFields() {
            var selectedRole = rolDropdown.value;

            // Recorremos los campos y los mostramos u ocultamos según el rol
            Object.keys(fields).forEach(field => {
                document.getElementById(field).style.display = fields[field].includes(selectedRole) ? "block" : "none";
            });
        }

        toggleFields();
        rolDropdown.addEventListener("change", toggleFields);
    });
</script>